{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","id","title","completed","cx","TodoList","todos","map","username","userId","App","useState","selectedUser","setSelectedUser","todoTitle","setTodoTitle","todosFromServer","setTodos","isTitleEmpty","setIsTitleEmpty","isSelectedUserEmpty","setIsSelectedUserEmpty","onsubmitHandler","event","preventDefault","replace","Math","max","isValidInput","newTodo","prevTodos","todosWithUser","usersFromServer","find","item","action","method","onSubmit","type","value","placeholder","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6de18ea.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import cx from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cx(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo\n          user={user}\n        />\n      )}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { FormEvent, useState } from 'react';\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(item => item.id === userId);\n\n  return foundUser || null;\n}\n\nexport const App = () => {\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [todos, setTodos] = useState(todosFromServer);\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isSelectedUserEmpty, setIsSelectedUserEmpty] = useState(false);\n\n  const processTitle = (str: string) => {\n    return str.replace(/[^a-zA-Za-åa-ö-w-я 0-9]/gi, '');\n  };\n\n  const isValidInput = (title: string, userId: number):boolean => {\n    if (title === '') {\n      setIsTitleEmpty(true);\n    }\n\n    if (userId === 0) {\n      setIsSelectedUserEmpty(true);\n    }\n\n    if (title === '' || userId === 0) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const onsubmitHandler = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const userId = selectedUser;\n    const title = processTitle(todoTitle);\n    const id = Math.max(...todos.map(todo => todo.id)) + 1;\n\n    if (!isValidInput(title, userId)) {\n      return;\n    }\n\n    const newTodo = {\n      id,\n      title,\n      completed: false,\n      userId,\n    };\n\n    setTodos(prevTodos => {\n      return [...prevTodos, newTodo];\n    });\n\n    setTodoTitle('');\n    setSelectedUser(0);\n  };\n\n  const todosWithUser = todos.map(todo => {\n    const user = getUser(todo.userId);\n\n    return {\n      ...todo,\n      user,\n    };\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={event => onsubmitHandler(event)}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={todoTitle}\n            placeholder=\"Enter a title\"\n            onChange={event => {\n              setIsTitleEmpty(false);\n              setTodoTitle(event.target.value);\n            }}\n          />\n          {isTitleEmpty && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUser}\n            onChange={event => {\n              setIsSelectedUserEmpty(false);\n              setSelectedUser(+event.target.value);\n            }}\n          >\n            <option value={0} disabled>Choose a user</option>\n            {usersFromServer.map((user) => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {isSelectedUserEmpty && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todosWithUser} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}